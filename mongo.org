#+title: Examples of a Mongo database for ase calculations
#+AUTHOR: John Kitchin
#+DATE: March 7, 2017

* Introduction
This document describes a MongoDB for vaspy calculations. Each calculation is saved as a document in the database with the atomic geometry, calculation parameters, and calculation results. Some data is stored redundantly to facilitate queries.

Here is some typical data stored.

#+BEGIN_SRC python :results output org drawer
from vasp.mongo import MongoDatabase
db = MongoDatabase()

import pprint
pprint.pprint(next(db.find({'calculator.class': 'Vasp'}, limit=1)))
#+END_SRC

#+RESULTS:
:RESULTS:
{u'_id': ObjectId('58c0b8aa340e3b2aec02aed7'),
 u'atoms': {u'atoms': [{u'charge': 0.0,
                        u'index': 0,
                        u'magmom': 0.0,
                        u'momentum': [0.0, 0.0, 0.0],
                        u'position': [0.0, 0.0, 9.999999873089783],
                        u'symbol': u'Al',
                        u'tag': 0},
                       {u'charge': 0.0,
                        u'index': 1,
                        u'magmom': 0.0,
                        u'momentum': [0.0, 0.0, 0.0],
                        u'position': [1.4318912156810875,
                                      0.8267027783996388,
                                      12.338268547696593],
                        u'symbol': u'Al',
                        u'tag': 0},
                       {u'charge': 0.0,
                        u'index': 2,
                        u'magmom': 0.0,
                        u'momentum': [0.0, 0.0, 0.0],
                        u'position': [2.863782474318912,
                                      1.6534055816003612,
                                      14.676537222303404],
                        u'symbol': u'Al',
                        u'tag': 0},
                       {u'charge': 0.0,
                        u'index': 3,
                        u'magmom': 0.0,
                        u'momentum': [0.0, 0.0, 0.0],
                        u'position': [0.0, 0.0, 17.014805896910214],
                        u'symbol': u'Al',
                        u'tag': 0}],
            u'cell': [[2.86378246, 0.0, 0.0],
                      [1.43189123, 2.48010836, 0.0],
                      [0.0, 0.0, 27.01480577]],
            u'chemical_symbols': [u'Al'],
            u'constraints': [],
            u'info': {},
            u'mass': 107.92616,
            u'natoms': 4,
            u'pbc': [True, True, True],
            u'spacegroup': u'P-3m1 (164)',
            u'symbol_counts': {u'Al': 4},
            u'volume': 191.87240999273095},
 u'calculator': {u'charges': [None, None, None, None],
                 u'class': u'Vasp',
                 u'dipole': None,
                 u'elapsed-time': 443.049,
                 u'energy': -14.17006237,
                 u'fmax': 0.18858625,
                 u'forces': [[0.0, 0.0, -0.01914122],
                             [0.0, 0.0, 0.18858625],
                             [0.0, 0.0, -0.18858625],
                             [0.0, 0.0, 0.01914122]],
                 u'free_energy': -14.17006237,
                 u'magmom': 0,
                 u'magmoms': [0.0, 0.0, 0.0, 0.0],
                 u'memory-used': 0.070486,
                 u'module': u'vasp.vasp_core',
                 u'name': u'Vasp',
                 u'nionic-steps': 1,
                 u'parameters': {u'encut': 300,
                                 u'ismear': 1,
                                 u'kpts': [6, 6, 6],
                                 u'lcharg': True,
                                 u'lwave': True,
                                 u'pp': u'PBE',
                                 u'sigma': 0.1,
                                 u'xc': u'pbe'},
                 u'path': u'/home-research/jkitchin/dft-book/blog/Al-bandstructure',
                 u'pathtags': [u'Al-bandstructure',
                               u'blog',
                               u'dft-book',
                               u'jkitchin'],
                 u'potcars': [[u'Al',
                               u'potpaw_PBE/Al/POTCAR',
                               u'ad7c649117f1490637e05717e30ab9a0dd8774f6']],
                 u'program': u'vasp ',
                 u'run-date': u'2016 05 27 ',
                 u'run-time': u'11:13:55 ',
                 u'smax': 0.006449951563292716,
                 u'stress': [0.006449951563292716,
                             0.006449951563292716,
                             0.0017486387353480974,
                             -0.0,
                             -0.0,
                             -0.0],
                 u'subversion': u'31Mar14 (build Aug 04 2015 12:48:45) complex                          serial ',
                 u'version': u'5.3.5  '},
 u'ctime': datetime.datetime(2017, 3, 9, 2, 6, 34, 141000),
 u'inserted-hash': u'130b806889a5cace009959e73055e4ab440a4618',
 u'mtime': datetime.datetime(2017, 3, 9, 2, 6, 34, 141000),
 u'results': {u'energy': -14.17006237,
              u'fmax': 0.18858625,
              u'forces': [[0.0, 0.0, -0.01914122],
                          [0.0, 0.0, 0.18858625],
                          [0.0, 0.0, -0.18858625],
                          [0.0, 0.0, 0.01914122]],
              u'smax': 0.006449951563292716,
              u'stress': [0.006449951563292716,
                          0.006449951563292716,
                          0.0017486387353480974,
                          -0.0,
                          -0.0,
                          -0.0]},
 u'source': u'dft-book',
 u'user': u'jkitchin'}
:END:

It is easy to write atoms with arbitrary key-value pairs. You have to do the work to decide if writing would add a duplicate entry.

Here is an example of adding an entry to the database.

#+BEGIN_SRC python :results output org drawer
from ase import Atoms
from ase.calculators.emt import EMT
h2 = Atoms('H2', [(0, 0, 0), (0, 0, 0.7)])
h2.calc = EMT()
print(h2.get_forces())

from vasp.mongo import MongoDatabase, mongo_doc
db = MongoDatabase()

doc = mongo_doc(h2)

print(db.write(doc, relaxed=False))
#+END_SRC

#+RESULTS:
:RESULTS:
[[ 0.          0.         -9.80289641]
 [ 0.          0.          9.80289641]]
58c0b7d2340e3b29a6c6d4d2
:END:

You can query the database by an id:

#+BEGIN_SRC python :results output org drawer
from vasp.mongo import MongoDatabase
from bson import ObjectId

db = MongoDatabase()
c = db.get_atoms({'_id': ObjectId('58c0b7d2340e3b29a6c6d4d2')})

a = next(c)

print(a)
print(a.get_potential_energy())
print(a.get_forces())
#+END_SRC

#+RESULTS:
:RESULTS:
Atoms(symbols='H2', magmoms=..., tags=..., charges=..., positions=..., momenta=..., cell=[1.0, 1.0, 1.0], pbc=[False, False, False], calculator=SinglePointCalculator(...))
1.41942600443
[[ 0.          0.         -9.80289641]
 [ 0.          0.          9.80289641]]
:END:

It isn't that easy to search by id unless you know it. Here we query a different way, using some parameters and calculator type.

#+BEGIN_SRC python :results output org drawer
from vasp.mongo import MongoDatabase

db = MongoDatabase()

hits = db.find({'calculator.class': 'EMT',
                'atoms.symbol_counts.H': 2,
                'atoms.natoms': 2,
                'relaxed': False,})

for hit in hits: print(hit)
#+END_SRC

#+RESULTS:
:RESULTS:
{u'ctime': datetime.datetime(2017, 3, 9, 2, 2, 58, 702000), u'calculator': {u'class': u'EMT', u'module': u'ase.calculators.emt'}, u'inserted-hash': u'1b91b56993629c89de35de7a00e3ee19ebeba5b2', u'results': {u'fmax': 9.802896414149222, u'energy': 1.419426004428582, u'forces': [[0.0, 0.0, -9.802896414149222], [0.0, 0.0, 9.802896414149222]]}, u'atoms': {u'info': {}, u'cell': [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]], u'natoms': 2, u'symbol_counts': {u'H': 2}, u'chemical_symbols': [u'H'], u'atoms': [{u'magmom': 0.0, u'index': 0, u'symbol': u'H', u'charge': 0.0, u'tag': 0, u'position': [0.0, 0.0, 0.0], u'momentum': [0.0, 0.0, 0.0]}, {u'magmom': 0.0, u'index': 1, u'symbol': u'H', u'charge': 0.0, u'tag': 0, u'position': [0.0, 0.0, 0.7], u'momentum': [0.0, 0.0, 0.0]}], u'volume': 1.0, u'mass': 2.01588, u'pbc': [False, False, False], u'spacegroup': u'P4/mmm (123)', u'constraints': []}, u'user': u'jkitchin', u'mtime': datetime.datetime(2017, 3, 9, 2, 2, 58, 702000), u'_id': ObjectId('58c0b7d2340e3b29a6c6d4d2'), u'relaxed': False}
:END:

We can add any kind of calculator.

#+BEGIN_SRC python :results output org drawer
from ase.calculators.singlepoint import SinglePointCalculator
from ase import Atoms

h2 = Atoms('H2', [(0, 0, 0), (0, 0, 0.7)])

calc = SinglePointCalculator(energy=0.0, atoms=h2)
h2.set_calculator(calc)

from vasp.mongo import MongoDatabase, mongo_doc

db = MongoDatabase()
print(db.write(mongo_doc(h2)))
#+END_SRC

#+RESULTS:
:RESULTS:
58c0b835340e3b2a2afb4999
:END:

#+BEGIN_SRC python :results output org drawer
from vasp.mongo import MongoDatabase
from bson import ObjectId

db = MongoDatabase()
c = db.find({'_id': ObjectId('58c0b835340e3b2a2afb4999')})

print(next(c))
#+END_SRC

#+RESULTS:
:RESULTS:
{u'ctime': datetime.datetime(2017, 3, 9, 2, 4, 37, 359000), u'calculator': {u'class': u'SinglePointCalculator', u'module': u'ase.calculators.singlepoint'}, u'inserted-hash': u'86b9784e88fcacd8e79cd86637c0744b584d0030', u'results': {u'energy': 0.0}, u'atoms': {u'info': {}, u'cell': [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]], u'natoms': 2, u'symbol_counts': {u'H': 2}, u'chemical_symbols': [u'H'], u'atoms': [{u'magmom': 0.0, u'index': 0, u'symbol': u'H', u'charge': 0.0, u'tag': 0, u'position': [0.0, 0.0, 0.0], u'momentum': [0.0, 0.0, 0.0]}, {u'magmom': 0.0, u'index': 1, u'symbol': u'H', u'charge': 0.0, u'tag': 0, u'position': [0.0, 0.0, 0.7], u'momentum': [0.0, 0.0, 0.0]}], u'volume': 1.0, u'mass': 2.01588, u'pbc': [False, False, False], u'spacegroup': u'P4/mmm (123)', u'constraints': []}, u'user': u'jkitchin', u'mtime': datetime.datetime(2017, 3, 9, 2, 4, 37, 359000), u'_id': ObjectId('58c0b835340e3b2a2afb4999')}
:END:

* Assumptions

We assume a Mongo server is running on localhost at port 27017, with an "ase" database and "atoms" collection by default. You can set all of these with args to MongoDatabase(). The server does not run automatically right now, it has to be started after reboots. There is currently no security on the database.

Then, you create atoms, and write them to the database. You can write arbitrary (anything that can be serialized to json) key-value pairs to the database.

Start here: https://docs.mongodb.com/manual/

Query intro: https://docs.mongodb.com/manual/crud/#read-operations

* Example queries
** path tags

Find by pathtags, which is just the path split by directories. The order is not important.

The MongoDatabase initializer returns the database object. There is a db.collection attribute that is the actual collection you want to work on. There are a few thing wrappers for functions like find and count.

The find function returns a pymongo cursor, which is a generator that returns documents. The documents are basically Python dictionaries.


#+BEGIN_SRC python
import pprint
from vasp.mongo import MongoDatabase
db = MongoDatabase()

c = db.find({'calculator.pathtags': {'$all': ['O2-sp-triplet', 'molecules']}})
print(c.count())
pprint.pprint(next(c))
#+END_SRC

#+RESULTS:
#+begin_example
1
{u'_id': ObjectId('58c0b930340e3b2aec02af5b'),
 u'atoms': {u'atoms': [{u'charge': 0.0,
                        u'index': 0,
                        u'magmom': 0.0,
                        u'momentum': [0.0, 0.0, 0.0],
                        u'position': [4.9927693, 5.0, 5.0],
                        u'symbol': u'O',
                        u'tag': 0},
                       {u'charge': 0.0,
                        u'index': 1,
                        u'magmom': 0.0,
                        u'momentum': [0.0, 0.0, 0.0],
                        u'position': [6.227230700000001, 5.0, 5.0],
                        u'symbol': u'O',
                        u'tag': 0}],
            u'cell': [[10.0, 0.0, 0.0], [0.0, 10.0, 0.0], [0.0, 0.0, 10.0]],
            u'chemical_symbols': [u'O'],
            u'constraints': [],
            u'info': {},
            u'mass': 31.9988,
            u'natoms': 2,
            u'pbc': [True, True, True],
            u'spacegroup': u'P4/mmm (123)',
            u'symbol_counts': {u'O': 2},
            u'volume': 1000.0000000000007},
 u'calculator': {u'charges': [None, None],
                 u'class': u'Vasp',
                 u'dipole': None,
                 u'elapsed-time': 96.775,
                 u'energy': -9.84832389,
                 u'fmax': 0.02269834,
                 u'forces': [[0.02269834, 0.0, 0.0], [-0.02269834, 0.0, 0.0]],
                 u'free_energy': -9.84832389,
                 u'magmom': 2.0000084,
                 u'magmoms': [0.815, 0.815],
                 u'memory-used': 0.121297,
                 u'module': u'vasp.vasp_core',
                 u'name': u'Vasp',
                 u'nionic-steps': 1,
                 u'parameters': {u'encut': 400,
                                 u'ibrion': 2,
                                 u'ismear': 0,
                                 u'ispin': 2,
                                 u'kpts': [1, 1, 1],
                                 u'lcharg': False,
                                 u'lorbit': 11,
                                 u'lwave': True,
                                 u'magmom': [1.0, 1.0],
                                 u'nsw': 10,
                                 u'pp': u'PBE',
                                 u'sigma': 0.01,
                                 u'xc': u'pbe'},
                 u'path': u'/home-research/jkitchin/dft-book/molecules/O2-sp-triplet',
                 u'pathtags': [u'O2-sp-triplet',
                               u'molecules',
                               u'dft-book',
                               u'jkitchin'],
                 u'potcars': [[u'O',
                               u'potpaw_PBE/O/POTCAR',
                               u'592f34096943a6f30db8749d13efca516d75ec55']],
                 u'program': u'vasp ',
                 u'run-date': u'2016 05 19 ',
                 u'run-time': u'09:21:47 ',
                 u'smax': 0.0016375624234798473,
                 u'stress': [0.0012823514731940845,
                             0.0016375624234798473,
                             0.0016375624234798473,
                             -0.0,
                             -0.0,
                             -0.0],
                 u'subversion': u'31Mar14 (build Aug 04 2015 12:48:45) complex                          serial ',
                 u'version': u'5.3.5  '},
 u'ctime': datetime.datetime(2017, 3, 9, 2, 8, 48, 84000),
 u'inserted-hash': u'063e6e1a504a4f8c871deb3ccab0e24ddaba122f',
 u'mtime': datetime.datetime(2017, 3, 9, 2, 8, 48, 84000),
 u'results': {u'energy': -9.84832389,
              u'fmax': 0.02269834,
              u'forces': [[0.02269834, 0.0, 0.0], [-0.02269834, 0.0, 0.0]],
              u'smax': 0.0016375624234798473,
              u'stress': [0.0012823514731940845,
                          0.0016375624234798473,
                          0.0016375624234798473,
                          -0.0,
                          -0.0,
                          -0.0]},
 u'source': u'dft-book',
 u'user': u'jkitchin'}
#+end_example


** formula

By formula, Say NH3. We query by type and number, and we specify natoms too, to prevent getting slabs with adsorbates of this composition.

#+BEGIN_SRC python :results output org drawer
from pprint import pprint
from vasp.mongo import MongoDatabase
db = MongoDatabase()

c = db.find({'atoms.symbol_counts.N': 1,
             'atoms.symbol_counts.H': 3,
             'atoms.natoms': 4})
print(c.count())
pprint(next(c))
#+END_SRC

#+RESULTS:
:RESULTS:
2
{u'_id': ObjectId('58c0b94e340e3b2aec02af82'),
 u'atoms': {u'atoms': [{u'charge': 0.0,
                        u'index': 0,
                        u'magmom': 0.0,
                        u'momentum': [0.0, 0.0, 0.0],
                        u'position': [5.0, 5.0, 5.0],
                        u'symbol': u'N',
                        u'tag': 0},
                       {u'charge': 0.0,
                        u'index': 1,
                        u'magmom': 0.0,
                        u'momentum': [0.0, 0.0, 0.0],
                        u'position': [5.0, 5.9492361, 4.6072123],
                        u'symbol': u'H',
                        u'tag': 0},
                       {u'charge': 0.0,
                        u'index': 2,
                        u'magmom': 0.0,
                        u'momentum': [0.0, 0.0, 0.0],
                        u'position': [5.8219788999999995,
                                      4.5253727999999995,
                                      4.6072491],
                        u'symbol': u'H',
                        u'tag': 0},
                       {u'charge': 0.0,
                        u'index': 3,
                        u'magmom': 0.0,
                        u'momentum': [0.0, 0.0, 0.0],
                        u'position': [4.1780211000000005,
                                      4.5253727999999995,
                                      4.6072491],
                        u'symbol': u'H',
                        u'tag': 0}],
            u'cell': [[10.0, 0.0, 0.0], [0.0, 10.0, 0.0], [0.0, 0.0, 10.0]],
            u'chemical_symbols': [u'H', u'N'],
            u'constraints': [{u'kwargs': {u'indices': [0]},
                              u'name': u'FixAtoms'}],
            u'info': {},
            u'mass': 17.030520000000003,
            u'natoms': 4,
            u'pbc': [True, True, True],
            u'spacegroup': u'Pm (6)',
            u'symbol_counts': {u'H': 3, u'N': 1},
            u'volume': 1000.0000000000007},
 u'calculator': {u'charges': [None, None, None, None],
                 u'class': u'Vasp',
                 u'dipole': None,
                 u'elapsed-time': 205.702,
                 u'energy': -19.44508478,
                 u'fmax': 0.01656847,
                 u'forces': [[0.0, 0.0, 0.0],
                             [0.0, -0.01656847, -0.01226173],
                             [-0.01416242, 0.00778803, -0.01222133],
                             [0.01416242, 0.00778803, -0.01222133]],
                 u'free_energy': -19.44508478,
                 u'magmom': 0,
                 u'magmoms': [0.0, 0.0, 0.0, 0.0],
                 u'memory-used': 0.089491,
                 u'module': u'vasp.vasp_core',
                 u'name': u'Vasp',
                 u'nionic-steps': 3,
                 u'parameters': {u'encut': 350,
                                 u'ibrion': 1,
                                 u'ismear': 1,
                                 u'kpts': [1, 1, 1],
                                 u'lcharg': False,
                                 u'lwave': True,
                                 u'nsw': 10,
                                 u'pp': u'PBE',
                                 u'sigma': 0.1,
                                 u'xc': u'pbe'},
                 u'path': u'/home-research/jkitchin/dft-book/molecules/nh3-initial',
                 u'pathtags': [u'nh3-initial',
                               u'molecules',
                               u'dft-book',
                               u'jkitchin'],
                 u'potcars': [[u'N',
                               u'potpaw_PBE/N/POTCAR',
                               u'536358c988fa48058b235b560c7e07049edd40e0'],
                              [u'H',
                               u'potpaw_PBE/H/POTCAR',
                               u'51dd11a1883cb1d482388078d3764b6e1fde9e02']],
                 u'program': u'vasp ',
                 u'run-date': u'2016 05 18 ',
                 u'run-time': u'22:35:27 ',
                 u'smax': 0.0019324973600313817,
                 u'stress': [0.0018598465495721207,
                             0.0018678603789048624,
                             0.0019324973600313817,
                             -1.4921138961610293e-06,
                             -0.0,
                             -0.0],
                 u'subversion': u'31Mar14 (build Aug 04 2015 12:48:45) complex                          serial ',
                 u'version': u'5.3.5  '},
 u'ctime': datetime.datetime(2017, 3, 9, 2, 9, 18, 606000),
 u'inserted-hash': u'97069959e059fd092badb741d6e2e0cfc63b9846',
 u'mtime': datetime.datetime(2017, 3, 9, 2, 9, 18, 606000),
 u'results': {u'energy': -19.44508478,
              u'fmax': 0.01656847,
              u'forces': [[0.0, 0.0, 0.0],
                          [0.0, -0.01656847, -0.01226173],
                          [-0.01416242, 0.00778803, -0.01222133],
                          [0.01416242, 0.00778803, -0.01222133]],
              u'smax': 0.0019324973600313817,
              u'stress': [0.0018598465495721207,
                          0.0018678603789048624,
                          0.0019324973600313817,
                          -1.4921138961610293e-06,
                          -0.0,
                          -0.0]},
 u'source': u'dft-book',
 u'user': u'jkitchin'}
:END:

Here we find calculations containing N and H.

#+BEGIN_SRC python :results output org drawer
from pprint import pprint
from vasp.mongo import MongoDatabase
db = MongoDatabase()

c = db.find({'atoms.chemical_symbols': {'$all': ['N', 'H']}})
print(c.count())
#+END_SRC

#+RESULTS:
:RESULTS:
2
:END:

** By a calc parameter

You can use dot notation to search for fields in subdocuments.

#+BEGIN_SRC python :results output org drawer
import numpy as np
from vasp.mongo import MongoDatabase

db = MongoDatabase()
c = db.find({'calculator.parameters.hfscreen': 0.2})
print(c.count())

# find special setups
c = db.find({'calculator.parameters.setups': {'$exists': True}})
print(c.count())
for doc in c: print(doc['calculator']['parameters']['setups'])

# An neb
c = db.find({'calculator.parameters.images': {'$exists': True}})
print(c.count())
#+END_SRC

#+RESULTS:
:RESULTS:
1
3
[[u'O', u'_s']]
[[u'O', u'_s']]
[[u'O', u'_s']]
0
:END:

** An equation of state

Here we filter by spacegroup to get a set of calculations we could use for an equation of state of fcc Cu. We match on a regular expression on the spacegroup since it is stored as a string with the number in parentheses.

#+BEGIN_SRC python :results output org drawer
import numpy as np
from vasp.mongo import MongoDatabase
db = MongoDatabase()

eos = db.find({'atoms.symbol_counts.Cu': 1, 'atoms.natoms': 1,
               'atoms.spacegroup': {'$regex': '(225)'},
               'calculator.parameters.kpts': [8, 8, 8],
               'calculator.parameters.encut': 350},
              projection={'_id': 0, # do not show id
                          'calculator.pathtags': 1,
                          'calculator.energy': 1,
                          'atoms.volume': 1})

print(eos.count())
for c in eos: print c
#+END_SRC

#+RESULTS:
:RESULTS:
6
{u'calculator': {u'energy': -3.66182568, u'pathtags': [u'Cu-3.5', u'bulk', u'dft-book', u'jkitchin']}, u'atoms': {u'volume': 10.71875}}
{u'calculator': {u'energy': -3.70817569, u'pathtags': [u'Cu-3.55', u'bulk', u'dft-book', u'jkitchin']}, u'atoms': {u'volume': 11.184718749999998}}
{u'calculator': {u'energy': -3.73109713, u'pathtags': [u'Cu-3.6', u'bulk', u'dft-book', u'jkitchin']}, u'atoms': {u'volume': 11.663999999999998}}
{u'calculator': {u'energy': -3.73432446, u'pathtags': [u'Cu-3.65', u'bulk', u'dft-book', u'jkitchin']}, u'atoms': {u'volume': 12.156781250000002}}
{u'calculator': {u'energy': -3.72094163, u'pathtags': [u'Cu-3.7', u'bulk', u'dft-book', u'jkitchin']}, u'atoms': {u'volume': 12.663250000000003}}
{u'calculator': {u'energy': -3.69342783, u'pathtags': [u'Cu-3.75', u'bulk', u'dft-book', u'jkitchin']}, u'atoms': {u'volume': 13.183593749999996}}
:END:

** Check a calculator

This shows we can rebuild a calculator from the database.

#+BEGIN_SRC python :results output org drawer
from vasp.mongo import MongoDatabase
from vasp import Vasp

db = MongoDatabase()
c = next(db.find({'atoms.symbol_counts.O': 1}))

calc = Vasp(c['calculator']['path'], c['calculator']['parameters'])
print(calc)
#+END_SRC

#+RESULTS:
:RESULTS:


Vasp calculation directory:
---------------------------
  [[/home-research/jkitchin/dft-book/blog/source/org/molecules/co-1.05]]

Unit cell:
----------
       x       y       z             |v|
  v0   6.000   0.000   0.000       6.000 Ang
  v1   0.000   6.000   0.000       6.000 Ang
  v2   0.000   0.000   6.000       6.000 Ang
  alpha, beta, gamma (deg):  90.0  90.0  90.0
  Total volume:                  216.000 Ang^3
  Stress:    xx     yy     zz     yz     xz     xy
         -0.060  0.011  0.011 -0.000 -0.000 -0.000 GPa

  ID  tag     sym    x         y         z        rmsF (eV/A)
  0   0       C      0.000     0.000     0.000      14.93
  1   0       O      1.050     0.000     0.000      14.93
  Potential energy: -14.2158 eV

INPUT Parameters:
-----------------
  lcharg    : False
  pp        : PBE
  nbands    : 6
  xc        : pbe
  ismear    : 1
  lwave     : False
  sigma     : 0.01
  kpts      : [1, 1, 1]
  encut     : 350

Pseudopotentials used:
----------------------
  C: potpaw_PBE/C/POTCAR (git-hash: ee4d8576584f8e9f32e90853a0cbf9d4a9297330)
  O: potpaw_PBE/O/POTCAR (git-hash: 592f34096943a6f30db8749d13efca516d75ec55)
:END:



*** TODO A special setup calculator

#+BEGIN_SRC python :results output org drawer
from vasp.mongo import MongoDatabase
from vasp import Vasp

db = MongoDatabase()
atoms = next(db.get_atoms({'calculator.path': '/home-research/jkitchin/dft-book/molecules/O_s'}))
calc = atoms.get_calculator()
print(calc)
#+END_SRC

#+RESULTS:
:RESULTS:


Vasp calculation directory:
---------------------------
  [[/home-research/jkitchin/dft-book/molecules/O_s]]

Unit cell:
----------
       x       y       z             |v|
  v0   6.000   0.000   0.000       6.000 Ang
  v1   0.000   6.000   0.000       6.000 Ang
  v2   0.000   0.000   6.000       6.000 Ang
  alpha, beta, gamma (deg):  90.0  90.0  90.0
  Total volume:                  216.000 Ang^3
  Stress:    xx     yy     zz     yz     xz     xy
          0.001  0.001  0.001 -0.000 -0.000 -0.000 GPa

  ID  tag     sym    x         y         z        rmsF (eV/A)
  0   0       O      5.000     5.000     5.000       0.00
  Potential energy: -1.5056 eV

INPUT Parameters:
-----------------
  magmom    : [1.0]
  pp        : PBE
  setups    : [['O', '_s']]
  kpts      : [1, 1, 1]
  encut     : 300
  lcharg    : False
  xc        : pbe
  ispin     : 2
  ismear    : 0
  lwave     : False
  sigma     : 0.001
  lorbit    : 11

Pseudopotentials used:
----------------------
  O: potpaw_PBE/O_s/POTCAR (git-hash: b4bfc67547c457885a1cc949eeda825354a6520a)
:END:

*** TODO calc with rwigs

#+BEGIN_SRC python :results output org drawer
from vasp.mongo import MongoDatabase
from vasp import Vasp

db = MongoDatabase()
atoms = next(db.get_atoms({'calculator.path': '/home-research/jkitchin/dft-book/molecules/co-ados'}))
calc = atoms.get_calculator()
print(calc)
#+END_SRC

#+RESULTS:
:RESULTS:


Vasp calculation directory:
---------------------------
  [[/home-research/jkitchin/dft-book/molecules/co-ados]]

Unit cell:
----------
       x       y       z             |v|
  v0   6.000   0.000   0.000       6.000 Ang
  v1   0.000   6.000   0.000       6.000 Ang
  v2   0.000   0.000   6.000       6.000 Ang
  alpha, beta, gamma (deg):  90.0  90.0  90.0
  Total volume:                  216.000 Ang^3
  Stress:    xx     yy     zz     yz     xz     xy
          0.060  0.027  0.027 -0.000 -0.000 -0.000 GPa

  ID  tag     sym    x         y         z        rmsF (eV/A)
  0   0       C      0.000     0.000     0.000       5.14
  1   0       O      1.200     0.000     0.000       5.14
  Potential energy: -14.7178 eV

INPUT Parameters:
-----------------
  lcharg    : False
  pp        : PBE
  kpts      : [1, 1, 1]
  xc        : pbe
  ismear    : 1
  lwave     : False
  sigma     : 0.1
  rwigs     : {'C': 1.0, 'O': 1.0}
  encut     : 300

Pseudopotentials used:
----------------------
  C: potpaw_PBE/C/POTCAR (git-hash: ee4d8576584f8e9f32e90853a0cbf9d4a9297330)
  O: potpaw_PBE/O/POTCAR (git-hash: 592f34096943a6f30db8749d13efca516d75ec55)
:END:

** By a bond length
By C-O bond-length, say we want C-O bond lengths less than 1.2 angstroms. This would not be an easy query to do in the database. Instead we get all documents that match at least one C and one O, and use python externally to filter the matches.

#+BEGIN_SRC python :results output org drawer
import numpy as np
from vasp.mongo import MongoDatabase
db = MongoDatabase()

all_atoms = db.get_atoms({'atoms.symbol_counts.C': {'$gte': 1},
                          'atoms.symbol_counts.O': {'$gte': 1}})

def bond_length_filter(atoms, bond_length=1.2):
    "Return True if there is a C-O bond less than bond_length in atoms."
    C = [atom for atom in atoms if atom.symbol == 'C']
    O = [atom for atom in atoms if atom.symbol == 'O']
    for catom in C:
        for oatom in O:
            d = np.sqrt(sum(catom.position - oatom.position)**2)
            if d <= bond_length:
                return d

A = [atoms for atoms in all_atoms if bond_length_filter(atoms)]
print(len(A))
#+END_SRC

#+RESULTS:
:RESULTS:
24
:END:

** List all the pathtags

Here we have to use the db.collection to access the distinct command. You can always use this, it is just a little longer.

#+BEGIN_SRC python :results output org drawer
import numpy as np
from vasp.mongo import MongoDatabase

db = MongoDatabase()
c = db.collection.distinct('calculator.pathtags', {})
print(c)
#+END_SRC

#+RESULTS:
:RESULTS:
[u'Al-bandstructure', u'blog', u'dft-book', u'jkitchin', u'co-1.05', u'molecules', u'org', u'source', u'co-1.1', u'co-1.15', u'co-1.2', u'co-1.25', u'co-n00', u'co-n01', u'co-n02', u'co-n03', u'co-n04', u'co-n05', u'co-n06', u'co-n07', u'co-n08', u'co-n09', u'mp', u'serial-Cu-0', u'Fe-bcc-fixedmagmom-4.00', u'bulk', u'Fe-bcc-fixedmagmom-4.50', u'Fe-bcc-fixedmagmom-5.00', u'Fe-bcc-fixedmagmom-5.50', u'Fe-bcc-fixedmagmom-6.00', u'serial-Cu-1', u'serial-Cu-2', u'serial-Cu-3', u'serial-Cu-4', u'serial-Cu-5', u'serial-Cu-6', u'serial-Cu-7', u'serial-Cu-8', u'serial-Cu-9', u'mp-Cu-0', u'mp-Cu-1', u'mp-Cu-2', u'mp-Cu-3', u'mp-Cu-4', u'mp-Cu-5', u'mp-Cu-6', u'mp-Cu-7', u'mp-Cu-8', u'mp-Cu-9', u'mp-threadpool-Cu-0', u'mp-threadpool-Cu-1', u'mp-threadpool-Cu-2', u'mp-threadpool-Cu-3', u'mp-threadpool-Cu-4', u'mp-threadpool-Cu-5', u'mp-threadpool-Cu-6', u'mp-threadpool-Cu-7', u'mp-threadpool-Cu-8', u'mp-threadpool-Cu-9', u'threads-Cu-0', u'threads-Cu-1', u'threads-Cu-3', u'threads-Cu-2', u'threads-Cu-4', u'threads-Cu-6', u'threads-Cu-9', u'threads-Cu-5', u'threads-Cu-7', u'threads-Cu-8', u'mp-pool-Cu-1', u'mp-pool-Cu-2', u'mp-pool-Cu-9', u'mp-pool-Cu-5', u'mp-pool-Cu-7', u'mp-pool-Cu-3', u'mp-pool-Cu-0', u'mp-pool-Cu-4', u'mp-pool-Cu-8', u'mp-pool-Cu-6', u'futures-Cu-0', u'futures-Cu-1', u'futures-Cu-2', u'futures-Cu-3', u'futures-Cu-4', u'futures-Cu-6', u'futures-Cu-7', u'futures-Cu-5', u'futures-Cu-8', u'futures-Cu-9', u'queue-Cu-1', u'queue-Cu-2', u'queue-Cu-0', u'queue-Cu-3', u'queue-Cu-4', u'queue-Cu-5', u'queue-Cu-6', u'queue-Cu-7', u'queue-Cu-8', u'queue-Cu-9', u'bandstructure', u'simple-co', u'simple-co-n4', u'co-L-4', u'co-L-5', u'co-L-6', u'co-L-8', u'co-L-10', u'co-en-250', u'co-en-300', u'co-en-350', u'co-en-400', u'co-en-450', u'co-en-500', u'clone-1', u'co-chg', u'co-centered', u'benzene', u'chlorobenzene', u'CF3Br', u'h2o-bader', u'co-cg', u'h2o-relax-centered', u'h2o_vib', u'h2o_relax', u'h2o_vib_dfpt', u'n2-relax', u'n2-vib', u'O', u'O2', u'O-sp-triplet', u'O2-sp-triplet', u'O-sp-triplet-250', u'O2-sp-triplet-250', u'O-sp-triplet-300', u'O2-sp-triplet-300', u'O-sp-triplet-350', u'O2-sp-triplet-350', u'O-sp-triplet-400', u'O2-sp-triplet-400', u'O-sp-triplet-450', u'O2-sp-triplet-450', u'O-sp-triplet-500', u'O2-sp-triplet-500', u'O-sp-triplet-550', u'O2-sp-triplet-550', u'O-sp-triplet-sigma-0.2', u'O2-sp-triplet-sigma-0.2', u'O-sp-triplet-sigma-0.1', u'O2-sp-triplet-sigma-0.1', u'O-sp-triplet-sigma-0.05', u'O2-sp-triplet-sigma-0.05', u'O-sp-triplet-sigma-0.02', u'O2-sp-triplet-sigma-0.02', u'O-sp-triplet-sigma-0.01', u'O2-sp-triplet-sigma-0.01', u'O-sp-triplet-sigma-0.001', u'O2-sp-triplet-sigma-0.001', u'O-sp-singlet', u'O2-sp-singlet', u'O-square-box-origin', u'O-square-box-center', u'O-square-box-random', u'O-orthorhombic-box-origin', u'O-orthorhombic-box-center', u'O-orthorhombic-box-random', u'O-sp-triplet-lowsym', u'O2-sp-singlet-magmoms', u'O2-sp-triplet-magmoms', u'O-sp-triplet-lowsym-s', u'nh3-initial', u'nh3-final', u'O2-sp-triplet-s', u'benzene-pbe', u'benzene-pbe-d2', u'O_s', u'simple-co-gga', u'co-ados.bak', u'co-ados', u'CO', u'wgs', u'CO2', u'H2', u'H2O', u'CO-vib', u'CO2-vib', u'H2-vib', u'H2O-vib', u'Al-slab-unrelaxed', u'surfaces', u'Pt-slab-O-fcc', u'Pt-slab', u'Pt-slab-O-bridge', u'Pt-slab-O-hcp', u'Pt-slab-O-bridge-xy-constrained', u'Pt-slab-1x1', u'Pt-slab-1x1-O-fcc', u'Pt-slab-O-fcc-vib', u'Au-110', u'Au-110-missing-row', u'Ag-110', u'Ag-110-missing-row', u'Cu-110', u'Cu-110-missing-row', u'Al-slab-locpot', u'Al-Na-nodip', u'Al-Na-dip', u'Au-pbe', u'Au-pbe-d2', u'Au-benzene-pbe-d2', u'Al-slab-relaxed', u'Ag-kpts-2', u'Ag-kpts-3', u'Ag-kpts-4', u'Ag-kpts-5', u'Ag-kpts-6', u'Ag-kpts-8', u'Ag-kpts-10', u'Cu-sigma-0.001', u'Cu-sigma-0.05', u'Cu-sigma-0.1', u'Cu-sigma-0.2', u'Cu-sigma-0.5', u'Cu-3.5', u'Cu-3.55', u'Cu-3.6', u'Cu-3.65', u'Cu-3.7', u'Cu-3.75', u'Cu-bcc-2.75', u'Cu-bcc-2.8', u'Cu-bcc-2.85', u'Cu-bcc-2.9', u'Cu-bcc-2.95', u'Cu-bcc-3.0', u'Fe-bcc-fixedmagmom-0.00', u'Fe-bcc-fixedmagmom-2.00', u'Fe-bcc-fixedmagmom-8.00', u'Fe-bcc-sp-1', u'afm-feo', u'pd-ados', u'bulk-rh', u'atomic-rh', u'bulk-rh-kpts-3', u'bulk-rh-kpts-4', u'bulk-rh-kpts-6', u'bulk-rh-kpts-9', u'bulk-rh-kpts-12', u'bulk-rh-kpts-15', u'bulk-rh-kpts-18', u'atomic-rh-sp', u'Fe-bulk', u'Al-bulk', u'Ni-3.5', u'Ni-3.55', u'Ni-3.6', u'Ni-3.65', u'Ni-3.7', u'Ni-3.75', u'Cu2O', u'CuO', u'pd-dos-k8-ismear-5', u'pd-dos-k10-ismear-5', u'pd-dos-k12-ismear-5', u'pd-dos-k14-ismear-5', u'pd-dos-k16-ismear-5', u'pd-dos-k18-ismear-5', u'pd-dos-k20-ismear-5', u'Pd-LDA-3.75', u'Pd-LDA-3.8', u'Pd-LDA-3.85', u'Pd-LDA-3.9', u'Pd-LDA-3.95', u'Pd-LDA-4.0', u'Pd-LDA-4.05', u'Pd-LDA-4.1', u'Pd-GGA-PS-3.75', u'Pd-GGA-PS-3.8', u'Pd-GGA-PS-3.85', u'Pd-GGA-PS-3.9', u'Pd-GGA-PS-3.95', u'Pd-GGA-PS-4.0', u'Pd-GGA-PS-4.05', u'Pd-GGA-PS-4.1', u'Pd-GGA-AM-3.75', u'Pd-GGA-AM-3.8', u'Pd-GGA-AM-3.85', u'Pd-GGA-AM-3.9', u'Pd-GGA-AM-3.95', u'Pd-GGA-AM-4.0', u'Pd-GGA-AM-4.05', u'Pd-GGA-AM-4.1', u'Pd-GGA-RP-3.75', u'Pd-GGA-RP-3.8', u'Pd-GGA-RP-3.85', u'Pd-GGA-RP-3.9', u'Pd-GGA-RP-3.95', u'Pd-GGA-RP-4.0', u'Pd-GGA-RP-4.05', u'Pd-GGA-RP-4.1', u'Pd-GGA-PE-3.75', u'Pd-GGA-PE-3.8', u'Pd-GGA-PE-3.85', u'Pd-GGA-PE-3.9', u'Pd-GGA-PE-3.95', u'Pd-GGA-PE-4.0', u'Pd-GGA-PE-4.05', u'Pd-GGA-PE-4.1', u'Al-lda-vasp', u'Al-lda-ase', u'Fe-elastic', u'Au-fcc', u'Ag-fcc', u'Cu-fcc', u'Cu2O-U=4.0', u'CuO-U=4.0', u'Al-elastic', u'Ni-PBE', u'Cu-cls-0', u'CuPd-cls-0', u'Si-selfconsistent', u'Si-bandstructure', u'Ni-PBE0', u'Ni-HSE06', u'Si-bs-0', u'Si-bs-1', u'Si-bs-2', u'Al-c11--0.1', u'Al-c11--0.05', u'Al-c11-0', u'Al-c11-0.05', u'Al-c11-0.1', u'Al-c11--0.025', u'Al-c11-0.0', u'Al-c11-0.025', u'alloy', u'pd', u'cupd-1', u'cupd-2', u'cu', u'cu3pd-1', u'cu3pd-2', u'2.50-1.40', u'Ru', u'2.50-1.50', u'2.50-1.60', u'2.50-1.70', u'2.50-1.80', u'2.60-1.40', u'2.60-1.50', u'2.60-1.60', u'2.60-1.70', u'2.60-1.80', u'2.70-1.40', u'2.70-1.50', u'2.70-1.60', u'2.70-1.70', u'2.70-1.80', u'2.80-1.40', u'2.80-1.50', u'2.80-1.60', u'2.80-1.70', u'2.80-1.80', u'2.90-1.40', u'2.90-1.50', u'2.90-1.60', u'2.90-1.70', u'2.90-1.80', u'kpts-2', u'tio2', u'kpts-3', u'kpts-4', u'kpts-5', u'kpts-6', u'kpts-7', u'kpts-8', u'step1-0.90', u'step1-0.95', u'step1-1.00', u'step1-1.05', u'step1-1.10', u'step2-0.90', u'step2-0.95', u'step2-1.00', u'step2-1.05', u'step2-1.10', u'step3', u'step4', u'TiO2', u'rutile', u'rutile-28.0', u'rutile-30.0', u'rutile-32.0', u'rutile-34.0', u'rutile-36.0', u'anatase', u'anatase-30.0', u'anatase-33.0', u'anatase-35.0', u'anatase-37.0', u'anatase-39.0', u'3', u'Cu-layers', u'4', u'5', u'6', u'7', u'8', u'9', u'10', u'11', u'devel', u'lr-u', u'step1', u'step2--0.100', u'step2--0.050', u'step2--0.025', u'step2-0.025', u'step2-0.050', u'step2-0.100', u'step3--0.100', u'step3--0.050', u'step3--0.025', u'step3-0.025', u'step3-0.050', u'step3-0.100']
:END:

** update a record

Mongo provides update and findAndModify functions. Here is an example with update. Note, that it is possible to update many documents at a time, here we query by id to avoid that.

#+begin_SRC python :results output org drawer
from vasp.mongo import MongoDatabase
from bson.objectid import ObjectId

db = MongoDatabase()

db.collection.update({'calculator.path': '/home-research/jkitchin/dft-book/molecules/nh3-initial'},
                     {'$set': {'special_tags': ['initial-state']}})

# this is how to add a tag to the tags array
db.collection.update({'calculator.path': '/home-research/jkitchin/dft-book/molecules/nh3-initial'},
                     {'$addToSet': {'special_tags': {'$each': ['neb', 'initial-state']}}})

c = db.find({'calculator.path': '/home-research/jkitchin/dft-book/molecules/nh3-initial'},
            projection={'special_tags': 1})

import pprint
pprint.pprint(next(c))
#+END_SRC

#+RESULTS:
:RESULTS:
{u'_id': ObjectId('58c0b94e340e3b2aec02af82'),
 u'special_tags': [u'initial-state', u'neb']}
:END:

** Find calculations with FixAtoms constraints

#+begin_SRC python :results output org drawer
from vasp.mongo import MongoDatabase
from bson.objectid import ObjectId

db = MongoDatabase()



c = db.find({'atoms.constraints.name': 'FixAtoms'})

print(c.count())
#+END_SRC

#+RESULTS:
:RESULTS:
21
:END:

* An example to walk directory and add calculations.

This just defines a function that usually recognizes a Vasp directory (it fails on NEB directories), and if the directory is not in the database, it adds it.

#+BEGIN_SRC python :results output org drawer
import os
from vasp import *

from vasp.vasprc import VASPRC
VASPRC['mode'] = None

def vasp_p(directory):
    'returns True if a finished OUTCAR file exists in the current directory, else False'
    outcar = os.path.join(directory, 'OUTCAR')
    incar = os.path.join(directory, 'INCAR')
    if os.path.exists(outcar) and os.path.exists(incar):
        with open(outcar, 'r') as f:
            contents = f.read()
            if 'General timing and accounting informations for this job:' in contents:
                return True
    return False

from vasp.mongo import MongoDatabase, mongo_doc
db = MongoDatabase()

for root, dirs, files in os.walk('/home-research/jkitchin/dft-book'):
    for d in dirs:
        # compute absolute path to each directory in the current root
        absd = os.path.join(root, d)

        if (vasp_p(absd)
            # the test dir had some problems.
            and 'test' not in absd
            # Don't add things already in
            and db.find({"calculator.path": absd}).count() == 0):
            # we found a vasp directory, so we can do something in it.
            # here we add it to the ase mongdb

            calc = Vasp(absd)
            atoms = calc.get_atoms()
            db.write(mongo_doc(atoms), source="dft-book")
            print('added {}'.format(absd))
#+END_SRC



* Other things you might do

** derived documents

This is some idea that you could store an adsorption energy with links to the documents. Here is an example of getting an adsorption energy.

#+BEGIN_SRC python :results output org drawer
import numpy as np
from vasp.mongo import MongoDatabase

db = MongoDatabase()

clean = db.collection.find_one({'calculator.pathtags': {'$all': ['surfaces', 'Pt-slab']}})
oslab = db.collection.find_one({'calculator.pathtags': {'$all': ['surfaces', 'Pt-slab-O-fcc']}})
o2 = db.collection.find_one({'calculator.pathtags': {'$all': ['molecules', 'O2-sp-triplet-350']}})

print(clean['_id'])
print(oslab['calculator']['energy'] - clean['calculator']['energy'] - 0.5 * o2['calculator']['energy'])
#+END_SRC

#+RESULTS:
:RESULTS:
58bf59bf340e3bef692a308e
-1.079817325
:END:

As a document, you could store something like this. This is a loose thought, the pseudo-example below should also include the _id for each calculation so you know where it came from. Maybe there is some jsonic way of storing variables. Alternatively, you could store a python script to do the calculation, and its result.

#+BEGIN_SRC json
{"+" : [clean_slab_energy o_slab_energy {"*": [0.5 o2_energy]}]}
#+END_SRC


** Store trajectories

You can build up the document any way you want and store it.
